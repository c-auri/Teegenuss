---
import Page from '../../../layouts/Page.astro'
import Frame from '../../../components/page/Frame.astro'
import Subheading from '../../../components/page/Subheading.astro'
import Slideshow from '../../../components/tea/Slideshow.jsx'
import Purchase from '../../../components/tea/Purchase.astro'
import Origin from '../../../components/tea/Origin.astro'
import Preparation from '../../../components/tea/Preparation.astro'
import Accordion from '../../../components/tea/Accordion.jsx'

import  { CollectionEntry, getCollection, getEntry } from 'astro:content'
import { modulo } from '../../../scripts/modulo'

export async function getStaticPaths() {
  const teas = await getCollection('teas')
  const packs = await getCollection('packs')

  return teas.map(tea => {
    const pack = packs.find(p => p.id === tea.data.pack!.id)!
    return {
      params: {
        pack: pack.data.route,
        tea: tea.data.route },
      props: { entry: tea }
    }})
}

const packs = await getCollection('packs')

const { entry } = Astro.props
const { Content } = await entry.render()

const images = []

if (entry.data.hasImage) {
  images.push({ src: `/images/teas/${entry.slug}/01.png` })
}

if (entry.data.hasHover) {
  images.push({ src: `/images/teas/${entry.slug}/02.png` })
  //images.push({ src: `/images/teas/${entry.slug}/03.png` })
}

const tagCollection = await getCollection('tags')
const tags = entry.data.tags.map(entryTag => tagCollection.find(tag => tag.slug == entryTag))
const pack = await getEntry('packs', entry.data.pack.id)
const teasInPack = await getCollection('teas', tea => tea.data.pack.id === entry.data.pack.id)
const entryIndex = teasInPack.findIndex(tea => tea.id === entry.id)
const previousTea = teasInPack[modulo(entryIndex - 1, teasInPack.length)]!
const nextTea = teasInPack[modulo(entryIndex + 1, teasInPack.length)]!

const navigation = {
  root: "pakete",
  segments: [
    {
      collection: packs.sort((a: CollectionEntry<'packs'>, b: CollectionEntry<'packs'>) => a.id <= b.id ? +1 : -1),
      entry: pack,
    },
    {
      collection: teasInPack,
      entry: entry,
    }
  ],
  relative: {
    prev: {
      title: "vorheriger Tee",
      href: `/pakete/${pack.data.route}/${previousTea.data.route}`,
    },
    next: {
      title: "nÃ¤chster Tee",
      href: `/pakete/${pack.data.route}/${nextTea.data.route}`,
    }
  }
}
---
<Page title={entry.data.title} navigation={navigation}>
  <Frame>
    <section class="w-full mb-8 text-xl flex flex-col items-center sm:mb-10 lg:flex-row lg:gap-5 xl:gap-10 xl:items-start 2xl:mt-12 2xl:mb-24">
      <div class="w-full lg:min-w-[400px]">
        <Slideshow client:load images={images} />
      </div>
      <div class="max-w-2xl xl:mt-16 2xl:mt-24">
        <h1 class="cursor-default w-full my-2 text-3xl text-center font-bold text-slate-800 sm:text-4xl lg:text-left lg:text-5xl xl:text-6xl">{entry.data.title}</h1>
        <div class="my-3 md:mt-4 lg:text-2xl xl:mb-4 xl:mt-5">
          <Purchase data={entry.data} />
        </div>
        <div class="text-slate-800 xl:text-2xl">
          <Content />
        </div>
      </div>
    </section>
  </Frame>
  <Frame>
    <div class="mt-10 mb-20 grid gap-6 xl:grid-cols-5 xl:gap-20">
      <section class="xl:row-start-1 xl:col-start-1 xl:col-end-4">
        <Subheading classList="mb-6 text-start text-slate-800 sm:text-start">Begriffe</Subheading>
        <Accordion client:load entries={tags} />
      </section>
      <div class="flex flex-col gap-6 items-start md:flex-row md:gap-12 xl:flex-col xl:col-span-2 xl:row-start-1 xl:col-start-4 xl:col-end-6 xl:self-start">
        <Origin origin={entry.data.origin} classList="w-full max-w-2xl" />
        <Preparation gongfu={entry.data.preparation.gongfu} classList="w-full max-w-2xl" />
      </div>
      </div>
    </div>
  </Frame>
</Page>
