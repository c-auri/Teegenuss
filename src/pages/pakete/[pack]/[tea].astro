---
import Page from '../../../layouts/Page.astro'
import Frame from '../../../components/page/Frame.astro'
import Subheading from '../../../components/page/Subheading.astro'
import Slideshow from '../../../components/tea/Slideshow.jsx'
import Purchase from '../../../components/tea/Purchase.astro'
import Origin from '../../../components/tea/Origin.astro'
import Preparation from '../../../components/tea/Preparation.astro'
import Accordion from '../../../components/tea/Accordion.jsx'

import  { getCollection, getEntry } from 'astro:content'
import { modulo } from '../../../scripts/modulo'

export async function getStaticPaths() {
    const teas = await getCollection('teas')
    const packs = await getCollection('packs')

    return teas.map(tea => {
        const pack = packs.find(p => p.id === tea.data.pack!.id)!
        return {
            params: { 
                pack: pack.data.route,
                tea: tea.data.route }, 
            props: { entry: tea }
        }})
}

const teas = await getCollection('teas')
const packs = await getCollection('packs')

const { entry } = Astro.props
const { Content } = await entry.render()

const images = entry.data.hasNoImages ? [] : [
    { src: `/images/teas/${entry.slug}/01.png` },
    { src: `/images/teas/${entry.slug}/02.png` },
    { src: `/images/teas/${entry.slug}/03.png` },
]

const tags = await getCollection('tags', tag => entry.data.tags.includes(tag.slug))
const pack = await getEntry('packs', entry.data.pack.id)
const teasInPack = await getCollection('teas', tea => tea.data.pack.id === entry.data.pack.id)
const entryIndex = teasInPack.findIndex(tea => tea.id === entry.id)
const previousTea = teasInPack[modulo(entryIndex - 1, teasInPack.length)]!
const nextTea = teasInPack[modulo(entryIndex + 1, teasInPack.length)]!

const navigation = {
    root: "pakete",
    segments: [
        {
            collection: packs,
            entry: pack,
        },
        {
            collection: teas,
            entry: entry,
        }
    ],    
    relative: {
        prevHref:`/pakete/${pack.data.route}/${previousTea.data.route}`,
        nextHref:`/pakete/${pack.data.route}/${nextTea.data.route}`, 
    }
}
---
<Page title={entry.data.title} navigation={navigation}>
    <Frame>
        <section class="w-full mb-5 text-xl flex flex-col items-center sm:mb-10 lg:flex-row lg:gap-5 xl:gap-10 xl:items-start 2xl:mt-16 2xl:mb-28">
            <div class="w-full">
                <Slideshow client:load images={images} />
            </div>
            <div class="max-w-2xl flex flex-col items-center lg:items-start xl:mt-24">
                <h1 class="cursor-default w-full my-4 text-3xl text-center font-bold text-black sm:text-4xl lg:text-left lg:text-4xl xl:text-6xl">{entry.data.title}</h1>
                <div class="cursor-default self-stretch flex justify-between tracking-wider text-gray-500">
                    <Purchase data={entry.data} />
                </div>
                <div class="my-3 xl:text-2xl">
                    <Content />
                </div>
            </div>
        </section>
    </Frame>
    <Frame bg="bg-gray-100">
        <section class="pt-16 pb-24 text-gray-700 fill-gray-700 lg:pt-20 lg:pb-28">
            <Subheading classList="mb-8 text-center lg:text-left lg:mb-4">Zubereitung</Subheading>
            <Preparation preparation={entry.data.preparation} color="fill-gray-500" />
        </section>
    </Frame>
    <Frame bg="bg-white">
        <section class="py-24 grid gap-14 lg:grid-cols-5">
            <Subheading classList="text-start sm:text-start lg:row-start-1 lg:col-start-1 lg:col-end-6">Details</Subheading>
            <Origin origin={entry.data.origin} classList="w-full max-w-2xl lg:col-span-2 lg:row-start-2 lg:col-start-4 lg:col-end-6 lg:self-start" />
            <div class="w-full lg:max-w-2xl lg:row-start-2 lg:col-start-1 lg:col-end-4 flex flex-col items-center lg:items-start gap-5 xl:max-w-3xl">
                <Accordion client:load entries={tags} />
            </div>
        </section>
    </Frame>
</Page>