rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        match /users/{user} {
            allow read: if true
            allow create:
                if loggedIn()
                && equalsUserId(user)
                && usernameNotTaken(request.resource.data.name)
                && usernameCreatedAfter(request.resource.data.name)

            function usernameNotTaken(name) {
                return !exists(/databases/$(database)/documents/usernames/$(name))
            }

            function usernameCreatedAfter(name) {
                return 'name' in request.resource.data
                    && equalsUserId(getUsernameDataAfter(name).uid)
            }

            function getUsernameDataAfter(name) {
                return getAfter(/databases/$(database)/documents/usernames/$(name)).data
            }
        }

        match /usernames/{username} {
            allow read: if true
            allow create:
                if loggedIn()
                && equalsUserId(request.resource.data.uid)
                && isValid(username)
                && isNameOfCurrentUser(username)

            function isValid(username) {
                return username.size() >= 3
                    && username.size() <= 20
                    && username.matches('^[a-zA-Z\u00C0-\u017F]+((_|:|([.-]? ?))?[a-zA-Z0-9\u00C0-\u017F]+)*$')
            }

            function isNameOfCurrentUser(username) {
                return username == getUserDetailsAfter().name
            }

            function getUserDetailsAfter() {
                return getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data
            }
        }

        match /bundles/{bundle} {
            allow read: if true
        }

        match /reviews/{review} {
            allow read: if true
            allow create:
                if loggedIn()
                && equalsUserId(request.auth.uid)
                && getReviewUserData().name == getUserDetails().name
                && getReviewUserData().photoURL == getUserDetails().photoURL
                && isBuyer(request.resource.data.bundle)
                && review == request.resource.data.tea + '-' + getReviewUserData().uid

            function getUserDetails() {
                return get(/databases/$(database)/documents/users/$(request.auth.uid)).data
            }

            function getReviewUserData() {
                return request.resource.data.user
            }

            function isBuyer(bundle) {
                return request.auth.uid in get(/databases/$(database)/documents/bundles/$(bundle)).data.buyers
            }
        }

        function loggedIn() {
            return request.auth != null
        }

        function equalsUserId(id) {
            return request.auth.uid == id
        }
    }
}